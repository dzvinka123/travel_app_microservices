version: '3.8'

services:
  cassandra:
    image: cassandra:5.0
    container_name: cassandra
    environment:
      - CASSANDRA_CLUSTER_NAME=APICluster
      - CASSANDRA_KEYSPACE=APIkeyspace
    ports:
      - "9042:9042"
    networks:
      - travel_network

  trip_planner_service:
    build:
      context: ./src/services/
      dockerfile: ./TripPlannerService/Dockerfile
    container_name: trip_planner_service
    environment:
      - FLASK_RUN_PORT=8000
      - FLASK_ENV=development
    depends_on:
      - cassandra
    networks:
      - travel_network
    ports:
      - "8000:8000"
    command: flask run --host=0.0.0.0

  weather_service:
    build:
      context: ./src/services/
      dockerfile: ./WeatherService/Dockerfile
    container_name: weather_service
    environment:
      - FLASK_RUN_PORT=8001
      - FLASK_ENV=development
      - CASSANDRA_CONTACT_POINT=cassandra
      - CASSANDRA_KEYSPACE=APIkeyspace
    depends_on:
      - cassandra
    networks:
      - travel_network
    ports:
      - "8001:8001"
    command: flask run --host=0.0.0.0

  coords_service:
    build:
        context: ./src/services/
        dockerfile: ./CoordsService/Dockerfile
    container_name: coords_service
    environment:
      - FLASK_RUN_PORT=8002
      - FLASK_ENV=development
    networks:
      - travel_network
    ports:
      - "8002:8002"
    command: flask run --host=0.0.0.0

  places_service:
    build:
        context: ./src/services/
        dockerfile: ./PlacesService/Dockerfile
    container_name: places_service
    environment:
      - FLASK_RUN_PORT=8003
      - FLASK_ENV=development
      - CASSANDRA_CONTACT_POINT=cassandra
      - CASSANDRA_KEYSPACE=APIkeyspace
    depends_on:
      - cassandra
    networks:
      - travel_network
    ports:
      - "8003:8003"
    command: flask run --host=0.0.0.0
  
  user_service:
    build:
      context: ./src/services/userService/
      dockerfile: Dockerfile
    container_name: user_service
    ports:
      - "8009:8009"
    networks:
      - travel_network
    command: uvicorn main:app --host 0.0.0.0 --port 8009 --reload
  
  journeys_service:
    build:
      context: ./src/services/journeysService/
      dockerfile: Dockerfile
    container_name: journeys_service
    ports:
      - "8008:8008"
    networks:
      - travel_network
    environment:
      - MONGODB_URI=mongodb://mongo1:27017,mongo2:27018,mongo3:27019/?replicaSet=rs0
      - DB_NAME=journeys_db
    depends_on:
      - mongo1
      - mongo2
      - mongo3
      - redis
    command: bash -c "uvicorn main:app --host 0.0.0.0 --port 8008 --reload & python worker.py"

  redis:
    image: redis:6.2
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - travel_network
      
  mongo1:
    image: mongo:6.0
    container_name: mongo1
    ports:
      - "27017:27017"
    volumes:
      - mongo1_data:/data/db
    command: --replSet rs0 --bind_ip_all
    networks:
      - travel_network

  mongo2:
    image: mongo:6.0
    container_name: mongo2
    ports:
      - "27018:27017"
    volumes:
      - mongo2_data:/data/db
    command: --replSet rs0 --bind_ip_all
    networks:
      - travel_network

  mongo3:
    image: mongo:6.0
    container_name: mongo3
    ports:
      - "27019:27017"
    volumes:
      - mongo3_data:/data/db
    command: --replSet rs0 --bind_ip_all
    networks:
      - travel_network

networks:
  travel_network:
    driver: bridge

volumes:
  mongo1_data:
  mongo2_data:
  mongo3_data:

